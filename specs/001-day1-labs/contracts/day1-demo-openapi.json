{
    "openapi": "3.0.3",
    "info": {
        "title": "Day 1 Demo MCP Helper API",
        "description": "Minimal HTTP facade used in Day 1 demos to exercise MCP tools and expose health information without wiring JSON-RPC manually.",
        "version": "0.1.0"
    },
    "servers": [
        {
            "url": "http://localhost:8080"
        }
    ],
    "paths": {
        "/healthz": {
            "get": {
                "tags": [
                    "status"
                ],
                "summary": "Check MCP server readiness",
                "responses": {
                    "200": {
                        "description": "Server is ready to receive requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "required": [
                                        "status"
                                    ],
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "enum": [
                                                "ok"
                                            ]
                                        },
                                        "version": {
                                            "type": "string"
                                        },
                                        "uptimeSeconds": {
                                            "type": "number"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "MCP server not yet ready"
                    }
                }
            }
        },
        "/tools/{toolName}": {
            "post": {
                "tags": [
                    "tools"
                ],
                "summary": "Invoke an MCP tool over HTTP bridge",
                "parameters": [
                    {
                        "name": "toolName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "hello_world",
                                "list_pods"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ToolInvocation"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Tool invocation succeeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ToolResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ToolError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected failure bridging to MCP server"
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "tags": [
                    "observability"
                ],
                "summary": "Expose Prometheus metrics collected during labs",
                "responses": {
                    "200": {
                        "description": "Prometheus plaintext metrics stream",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Metrics not yet available (exporter offline)"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "ToolInvocation": {
                "type": "object",
                "required": [
                    "arguments"
                ],
                "properties": {
                    "arguments": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Raw MCP tool arguments forwarded to the server"
                    }
                }
            },
            "ToolResult": {
                "type": "object",
                "required": [
                    "success"
                ],
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Tool-specific payload"
                    }
                }
            },
            "ToolError": {
                "type": "object",
                "required": [
                    "success",
                    "error",
                    "errorType"
                ],
                "properties": {
                    "success": {
                        "type": "boolean",
                        "enum": [
                            false
                        ]
                    },
                    "error": {
                        "type": "string"
                    },
                    "errorType": {
                        "type": "string",
                        "enum": [
                            "validation_error",
                            "api_error",
                            "internal_error"
                        ]
                    }
                }
            }
        }
    }
}